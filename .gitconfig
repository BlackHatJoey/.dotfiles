[init]
	templatedir = ~/.git_template

[user]
	email = alphonse.mariya@hotmail.com
	name = Alphonse Mariya
	signingkey = 24D4C85E7B4585A9

[commit]
	gpgSign = true

[core]
	editor = vim
	whitespace = fix,trailing-space,cr-at-eol
	excludesfile = ~/.ignore

[credential]
	helper = cache

[color]
	ui = true

[color "diff"]
	meta = blue bold
	frag = yellow bold reverse
	commit = yellow bold
	old = red
	new = green
	whitespace = red reverse

[diff]
	tool = vimdiff

[difftool]
	prompt = false

[merge]
	tool = diffconflicts

[mergetool "diffconflicts"]
	cmd = diffconflicts vim "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
	trustExitCode = true
	keepBackup = false

[pull]
	rebase = interactive

[push]
	gpgSign = if-asked

[status]
	short = true
	branch = true
	showStash = true
	submoduleSummary = true

[log]
	abbrevCommit = true
	decorate = short
	date = format:%a  %Y-%m-%d  %R  %z

[url "git@github.com:"]
	insteadOf = @gh:

[url "https://github.com/"]
	insteadOf = gh://

[url "https://aur.archlinux.org/"]
	insteadOf = aur://

[alias]
	ec = config --global --edit

	l = log --format=oneline --all --color
	ls = log --format=short --all --color
	lss = log --format=short --all --color --stat --summary
	lm = log --format=medium --all --color
	lmm = log --format=medium --all --color --stat --summary
	lf = log --format=fuller --all --color
	lff = log --format=fuller --all --color --stat --summary
	gl = log --format=oneline --all --color --graph
	gls = log --format=short --all --color --graph
	glss = log --format=short --all --color --graph --stat --summary
	glm = log --format=medium --all --color --graph
	glmm = log --format=medium --all --color --graph --stat --summary
	glf = log --format=fuller --all --color --graph
	glff = log --format=fuller --all --color --graph --stat --summary

	lnc = log --format=oneline --all --no-color
	lr = "!f() { git lff \"${1-HEAD}\"~..\"${1-HEAD}\"; }; f"
	lp = log --patch --all --color
	glp = log --patch --all --color --graph

	d = diff
	ds = diff --stat
	dc = diff --cached
	dl = diff --cached HEAD~
	dr = "!f() { git diff \"${1-HEAD}\"~..\"${1-HEAD}\"; }; f"
	dt = difftool
	grep = grep -Ii

	s = status
	a = add
	au = add --update
	ai = add --interactive
	ap = add --patch
	c = commit --verbose
	ca = commit --verbose --amend

	co = checkout
	com = checkout master
	col = checkout -
	cob = checkout -b
	b = branch
	bd = branch --delete
	bdf = branch --delete --force
	bdr = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git push --delete \"${1-origin}\" \"$CURRENT\"; }; f"
	bt = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git branch --set-upstream-to=\"${1-origin/$CURRENT}\"; }; f"

	cl = clone
	p = pull --prune
	f = fetch --prune --all --tags
	su = submodule update --init --recursive
	up = "!f() { git p \"$@\" && git su; }; f"

	pu = push
	pusu = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git push --set-upstream \"${1-origin}\" \"$CURRENT\"; }; f"

	m = merge
	ma = merge --abort
	mc = merge --continue
	mff = merge --ff-only
	mnff = merge --no-ff
	mt = mergetool
	cp = cherry-pick
	r = rebase
	ra = rebase --abort
	rc = rebase --interactive --continue
	ri = rebase --interactive
	rim = rebase --interactive master

	# rewrite history, default on origin
	rwh = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git rebase --interactive $(git merge-base HEAD \"${1-origin/$CURRENT}\"); }; f"

	# list branches sorted by last modified
	lb = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

	# list aliases
	la = "!git config --list | grep alias | cut -c 7- | sed -e 's/=/\\t/' | column -s $'\\t' | less"

	# initialize repository in current directory
	this = "!git init && git commit --message='Initialize' --allow-empty"

	# open github repository in browser
	open = "!f() { URL=$(git config remote.\"${1-origin}\".url); xdg-open \"${URL%%.git}\"; }; f"

	# hard reset with commit before (use reflog to restore)
	wipe = "!f() { git add --all && git commit --quiet --message='WIPE-SAVEPOINT' && git reset \"${1-HEAD~}\" --hard; }; f"

	# migrate commits to new branch
	# migrate <new branch> [onto=master] [range=origin]
	migrate = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git checkout -b \"$1\" && git branch --force \"$CURRENT\" \"${3-\\\"$CURRENT\\\"@\\{u\\}}\" && git rebase --onto \"${2-master}\" \"$CURRENT\"; }; f"

	ctags = "!.git/hooks/ctags"

	# fzf commands (custom)
	fbr = fzf-branch
	fco = fzf-checkout
	fcoc = fzf-checkout-commit
	fsha = fzf-print-sha
	fshow = fzf-show-commit
	fstash = fzf-show-stash
